# Let's maintain the value of each valid round on a stack as we process the data. 
# A stack is ideal since we only deal with operations involving the last or second-last valid round.

class Solution:
    def calPoints(self, ops):
        """
        :type ops: List[str]
        :rtype: int
        """
        points = []
        
        for i in ops:
            if i == '+':
                points.append(points[-1] + points[-2])
            elif i == 'D':
                points.append(points[-1] * 2)
            elif i == 'C':
                del points[-1]
            else:
                points.append(int(i))
        
        return sum(points)

# Time Complexity: O(N), where N is the length of ops. 
# We parse through every element in the given array once, and do O(1) work for each element.

# Space Complexity: O(N), the space used to store our stack.
